package fr.mdulac.mower.domain.assertj;

import org.assertj.core.api.AbstractAssert;

import fr.mdulac.mower.domain.Mower;
import fr.mdulac.mower.domain.Orientation;
import fr.mdulac.mower.domain.Position;

// Assertions is needed if an assertion for Iterable is generated

/**
 * {@link Mower} specific assertions - Generated by CustomAssertionGenerator.
 */
public class MowerAssert extends AbstractAssert<MowerAssert, Mower> {

	/**
	 * Creates a new </code>{@link MowerAssert}</code> to make assertions on
	 * actual Mower.
	 * 
	 * @param actual
	 *            the Mower we want to make assertions on.
	 */
	public MowerAssert(Mower actual) {
		super(actual, MowerAssert.class);
	}

	/**
	 * An entry point for MowerAssert to follow AssertJ standard
	 * <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly :
	 * <code>assertThat(myMower)</code> and get specific assertion with code
	 * completion.
	 * 
	 * @param actual
	 *            the Mower we want to make assertions on.
	 * @return a new </code>{@link MowerAssert}</code>
	 */
	public static MowerAssert assertThat(Mower actual) {
		return new MowerAssert(actual);
	}

	/**
	 * Verifies that the actual Mower's orientation is equal to the given one.
	 * 
	 * @param orientation
	 *            the given orientation to compare the actual Mower's
	 *            orientation to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Mower's orientation is not equal to the given
	 *             one.
	 */
	public MowerAssert hasOrientation(Orientation orientation) {
		// check that actual Mower we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = "\nExpected orientation of:\n  <%s>\nto be:\n  <%s>\n but was:\n  <%s>";

		// check
		if (!actual.getOrientation().equals(orientation)) {
			failWithMessage(errorMessage, actual, orientation, actual.getOrientation());
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Mower's position is equal to the given one.
	 * 
	 * @param position
	 *            the given position to compare the actual Mower's position to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Mower's position is not equal to the given
	 *             one.
	 */
	public MowerAssert hasPosition(Position position) {
		// check that actual Mower we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = "\nExpected position of:\n  <%s>\nto be:\n  <%s>\n but was:\n  <%s>";

		// check
		if (!actual.getPosition().equals(position)) {
			failWithMessage(errorMessage, actual, position, actual.getPosition());
		}

		// return the current assertion for method chaining
		return this;
	}

}
