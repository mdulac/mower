package fr.mdulac.mower.domain.assertj;

import org.assertj.core.api.AbstractAssert;

import fr.mdulac.mower.domain.Position;

// Assertions is needed if an assertion for Iterable is generated

/**
 * {@link Position} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PositionAssert extends AbstractAssert<PositionAssert, Position> {

	/**
	 * Creates a new </code>{@link PositionAssert}</code> to make assertions on
	 * actual Position.
	 * 
	 * @param actual
	 *            the Position we want to make assertions on.
	 */
	public PositionAssert(Position actual) {
		super(actual, PositionAssert.class);
	}

	/**
	 * An entry point for PositionAssert to follow AssertJ standard
	 * <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly :
	 * <code>assertThat(myPosition)</code> and get specific assertion with code
	 * completion.
	 * 
	 * @param actual
	 *            the Position we want to make assertions on.
	 * @return a new </code>{@link PositionAssert}</code>
	 */
	public static PositionAssert assertThat(Position actual) {
		return new PositionAssert(actual);
	}

	/**
	 * Verifies that the actual Position's x is equal to the given one.
	 * 
	 * @param x
	 *            the given x to compare the actual Position's x to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Position's x is not equal to the given one.
	 */
	public PositionAssert hasX(int x) {
		// check that actual Position we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = "\nExpected x of:\n  <%s>\nto be:\n  <%s>\n but was:\n  <%s>";

		// check
		if (actual.getX() != x) {
			failWithMessage(errorMessage, actual, x, actual.getX());
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Position's y is equal to the given one.
	 * 
	 * @param y
	 *            the given y to compare the actual Position's y to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Position's y is not equal to the given one.
	 */
	public PositionAssert hasY(int y) {
		// check that actual Position we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = "\nExpected y of:\n  <%s>\nto be:\n  <%s>\n but was:\n  <%s>";

		// check
		if (actual.getY() != y) {
			failWithMessage(errorMessage, actual, y, actual.getY());
		}

		// return the current assertion for method chaining
		return this;
	}

}
